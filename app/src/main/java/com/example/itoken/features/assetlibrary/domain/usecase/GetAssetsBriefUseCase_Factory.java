// Generated by Dagger (https://dagger.dev).
package com.example.itoken.features.assetlibrary.domain.usecase;

import com.example.itoken.features.assetlibrary.domain.repository.AssetRepository;
import com.example.itoken.utils.DispatcherProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetAssetsBriefUseCase_Factory implements Factory<GetAssetsBriefUseCase> {
  private final Provider<AssetRepository> repositoryProvider;

  private final Provider<DispatcherProvider> scopeProvider;

  public GetAssetsBriefUseCase_Factory(Provider<AssetRepository> repositoryProvider,
      Provider<DispatcherProvider> scopeProvider) {
    this.repositoryProvider = repositoryProvider;
    this.scopeProvider = scopeProvider;
  }

  @Override
  public GetAssetsBriefUseCase get() {
    return newInstance(repositoryProvider.get(), scopeProvider.get());
  }

  public static GetAssetsBriefUseCase_Factory create(Provider<AssetRepository> repositoryProvider,
      Provider<DispatcherProvider> scopeProvider) {
    return new GetAssetsBriefUseCase_Factory(repositoryProvider, scopeProvider);
  }

  public static GetAssetsBriefUseCase newInstance(AssetRepository repository,
      DispatcherProvider scope) {
    return new GetAssetsBriefUseCase(repository, scope);
  }
}
